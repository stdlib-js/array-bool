{
  "version": 3,
  "sources": ["../lib/from_iterator.js", "../lib/from_iterator_map.js", "../lib/from_array.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Boolean = require( '@stdlib/boolean-ctor' );\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {Array} output array\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push( Boolean( v.value ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromIterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Boolean = require( '@stdlib/boolean-ctor' );\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {Array} output array\n*/\nfunction fromIteratorMap( it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tout.push( Boolean( clbk.call( thisArg, v.value, i ) ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromIteratorMap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Boolean = require( '@stdlib/boolean-ctor' );\n\n\n// MAIN //\n\n/**\n* Fills an output array with \"boolean\" values.\n*\n* @private\n* @param {Uint8Array} buf - output array\n* @param {Array} arr - input array\n* @returns {Uint8Array} output array\n*/\nfunction fromArray( buf, arr ) {\n\tvar len;\n\tvar i;\n\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tbuf[ i ] = Boolean( arr[ i ] );\n\t}\n\treturn buf;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromArray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isArrayBuffer = require( '@stdlib/assert-is-arraybuffer' );\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasIteratorSymbolSupport = require( '@stdlib/assert-has-iterator-symbol-support' );\nvar ITERATOR_SYMBOL = require( '@stdlib/symbol-iterator' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar Boolean = require( '@stdlib/boolean-ctor' );\nvar getter = require( '@stdlib/array-base-getter' );\nvar accessorGetter = require( '@stdlib/array-base-accessor-getter' );\nvar format = require( '@stdlib/string-format' );\nvar fromIterator = require( './from_iterator.js' );\nvar fromIteratorMap = require( './from_iterator_map.js' );\nvar fromArray = require( './from_array.js' );\n\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = Uint8Array.BYTES_PER_ELEMENT;\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if a value is a `BooleanArray`.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `BooleanArray`\n*/\nfunction isBooleanArray( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\tvalue.constructor.name === 'BooleanArray' &&\n\t\tvalue.BYTES_PER_ELEMENT === BYTES_PER_ELEMENT\n\t);\n}\n\n/**\n* Returns a boolean indicating if a value is a boolean typed array constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean typed array constructor\n*/\nfunction isBooleanArrayConstructor( value ) {\n\treturn ( value === BooleanArray);\n}\n\n\n// MAIN //\n\n/**\n* Boolean array constructor.\n*\n* @constructor\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or an iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @throws {TypeError} if provided only a single argument, must provide a valid argument\n* @throws {TypeError} byte offset must be a nonnegative integer\n* @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements\n* @returns {BooleanArray} boolean array\n*\n* @example\n* var arr = new BooleanArray();\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var arr = new BooleanArray( 2 );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var arr = new BooleanArray( [ true, false ] );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new BooleanArray( buf );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 16\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new BooleanArray( buf, 8 );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 8\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new BooleanArray( buf, 8, 2 );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 2\n*/\nfunction BooleanArray() {\n\tvar byteOffset;\n\tvar nargs;\n\tvar buf;\n\tvar len;\n\tvar arg;\n\n\tnargs = arguments.length;\n\tif ( !(this instanceof BooleanArray) ) {\n\t\tif ( nargs === 0 ) {\n\t\t\treturn new BooleanArray();\n\t\t}\n\t\tif ( nargs === 1 ) {\n\t\t\treturn new BooleanArray( arguments[0] );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\treturn new BooleanArray( arguments[0], arguments[1] );\n\t\t}\n\t\treturn new BooleanArray( arguments[0], arguments[1], arguments[2] );\n\t}\n\t// Create the underlying data buffer...\n\tif ( nargs === 0 ) {\n\t\tbuf = new Uint8Array( 0 ); // backward-compatibility\n\t} else if ( nargs === 1 ) {\n\t\targ = arguments[ 0 ];\n\t\tif ( isNonNegativeInteger( arg ) ) {\n\t\t\tbuf = new Uint8Array( arg );\n\t\t} else if ( isCollection( arg ) ) {\n\t\t\tbuf = fromArray( new Uint8Array( arg.length ), arg );\n\t\t} else if ( isArrayBuffer( arg ) ) {\n\t\t\tbuf = new Uint8Array( arg );\n\t\t} else if ( isObject( arg ) ) {\n\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Environment lacks Symbol.iterator support. Must provide a length, ArrayBuffer, typed array, or array-like object. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\tif ( !isFunction( arg[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\tbuf = arg[ ITERATOR_SYMBOL ]();\n\t\t\tif ( !isFunction( buf.next ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\tbuf = new Uint8Array( fromIterator( buf ) );\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', arg ) );\n\t\t}\n\t} else {\n\t\tbuf = arguments[ 0 ];\n\t\tif ( !isArrayBuffer( buf ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', buf ) );\n\t\t}\n\t\tbyteOffset = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\tbuf = new Uint8Array( buf, byteOffset );\n\t\t} else {\n\t\t\tlen = arguments[ 2 ];\n\t\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Length must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t\t}\n\t\t\tif ( (len*BYTES_PER_ELEMENT) > (buf.byteLength-byteOffset) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid arguments. ArrayBuffer has insufficient capacity. Either decrease the array length or provide a bigger buffer. Minimum capacity: `%u`.', len*BYTES_PER_ELEMENT ) );\n\t\t\t}\n\t\t\tbuf = new Uint8Array( buf, byteOffset, len );\n\t\t}\n\t}\n\tsetReadOnly( this, '_buffer', buf );\n\tsetReadOnly( this, '_length', buf.length );\n\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof BooleanArray\n* @readonly\n* @type {PositiveInteger}\n* @default 1\n*\n* @example\n* var nbytes = BooleanArray.BYTES_PER_ELEMENT;\n* // returns 1\n*/\nsetReadOnly( BooleanArray, 'BYTES_PER_ELEMENT', BYTES_PER_ELEMENT );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof BooleanArray\n* @readonly\n* @type {string}\n* @default 'BooleanArray'\n*\n* @example\n* var str = BooleanArray.name;\n* // returns 'BooleanArray'\n*/\nsetReadOnly( BooleanArray, 'name', 'BooleanArray' );\n\n/**\n* Creates a new boolean array from an array-like object or an iterable.\n*\n* @name from\n* @memberof BooleanArray\n* @type {Function}\n* @param {(Collection|Iterable)} src - array-like object or iterable\n* @param {Function} [clbk] - callback to invoke for each source element\n* @param {*} [thisArg] - context\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a boolean array\n* @throws {TypeError} first argument must be an array-like object or an iterable\n* @throws {TypeError} second argument must be a function\n* @returns {BooleanArray} boolean array\n*\n* @example\n* var arr = BooleanArray.from( [ true, false ] );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* function clbk( v ) {\n*     return !v;\n* }\n*\n* var arr = BooleanArray.from( [ true, false ], clbk );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 2\n*/\nsetReadOnly( BooleanArray, 'from', function from( src ) {\n\tvar thisArg;\n\tvar nargs;\n\tvar clbk;\n\tvar out;\n\tvar buf;\n\tvar tmp;\n\tvar get;\n\tvar len;\n\tvar i;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t}\n\tif ( !isBooleanArrayConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a boolean array.' );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\tif ( nargs > 2 ) {\n\t\t\tthisArg = arguments[ 2 ];\n\t\t}\n\t}\n\tif ( isCollection( src ) ) {\n\t\tif ( clbk ) {\n\t\t\tlen = src.length;\n\t\t\tif ( src.get && src.set ) {\n\t\t\t\tget = accessorGetter( 'default' );\n\t\t\t} else {\n\t\t\t\tget = getter( 'default' );\n\t\t\t}\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tbuf[ i ] = Boolean( clbk.call( thisArg, get( src, i ), i ) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn new this( src );\n\t}\n\tif ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) { // eslint-disable-line max-len\n\t\tbuf = src[ ITERATOR_SYMBOL ]();\n\t\tif ( !isFunction( buf.next ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n\t\t}\n\t\tif ( clbk ) {\n\t\t\ttmp = fromIteratorMap( buf, clbk, thisArg );\n\t\t} else {\n\t\t\ttmp = fromIterator( buf );\n\t\t}\n\t\tlen = tmp.length;\n\t\tout = new this( len );\n\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tbuf[ i ] = tmp[ i ];\n\t\t}\n\t\treturn out;\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n});\n\n/**\n* Creates a new boolean array from a variable number of arguments.\n*\n* @name of\n* @memberof BooleanArray\n* @type {Function}\n* @param {...*} element - array elements\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a boolean array\n* @returns {BooleanArray} boolean array\n*\n* @example\n* var arr = BooleanArray.of( true, true, true, true );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 4\n*/\nsetReadOnly( BooleanArray, 'of', function of() {\n\tvar args;\n\tvar i;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t}\n\tif ( !isBooleanArrayConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a boolean array.' );\n\t}\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn new this( args );\n});\n\n/**\n* Pointer to the underlying data buffer.\n*\n* @name buffer\n* @memberof BooleanArray.prototype\n* @readonly\n* @type {ArrayBuffer}\n*\n* @example\n* var arr = new BooleanArray( 10 );\n*\n* var buf = arr.buffer;\n* // returns <ArrayBuffer>\n*/\nsetReadOnlyAccessor( BooleanArray.prototype, 'buffer', function get() {\n\treturn this._buffer.buffer;\n});\n\n/**\n* Size (in bytes) of the array.\n*\n* @name byteLength\n* @memberof BooleanArray.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new BooleanArray( 10 );\n*\n* var byteLength = arr.byteLength;\n* // returns 10\n*/\nsetReadOnlyAccessor( BooleanArray.prototype, 'byteLength', function get() {\n\treturn this._buffer.byteLength;\n});\n\n/**\n* Offset (in bytes) of the array from the start of its underlying `ArrayBuffer`.\n*\n* @name byteOffset\n* @memberof BooleanArray.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new BooleanArray( 10 );\n*\n* var byteOffset = arr.byteOffset;\n* // returns 0\n*/\nsetReadOnlyAccessor( BooleanArray.prototype, 'byteOffset', function get() {\n\treturn this._buffer.byteOffset;\n});\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof BooleanArray.prototype\n* @readonly\n* @type {PositiveInteger}\n* @default 1\n*\n* @example\n* var arr = new BooleanArray( 10 );\n*\n* var nbytes = arr.BYTES_PER_ELEMENT;\n* // returns 1\n*/\nsetReadOnly( BooleanArray.prototype, 'BYTES_PER_ELEMENT', BooleanArray.BYTES_PER_ELEMENT );\n\n/**\n* Returns the first element in an array for which a predicate function returns a truthy value.\n*\n* @name find\n* @memberof BooleanArray.prototype\n* @type {Function}\n* @param {Function} predicate - predicate function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a boolean array\n* @throws {TypeError} first argument must be a function\n* @returns {(boolean|void)} array element or undefined\n*\n* @example\n* function predicate( v ) {\n*     return v === true;\n* }\n*\n* var arr = new BooleanArray( 3 );\n*\n* arr.set( true, 0 );\n* arr.set( false, 1 );\n* arr.set( true, 2 );\n*\n* var v = arr.find( predicate );\n* // returns true\n*/\nsetReadOnly( BooleanArray.prototype, 'find', function find( predicate, thisArg ) {\n\tvar buf;\n\tvar v;\n\tvar i;\n\n\tif ( !isBooleanArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a boolean array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tv = Boolean( buf[ i ] );\n\t\tif ( predicate.call( thisArg, v, i, this ) ) {\n\t\t\treturn v;\n\t\t}\n\t}\n});\n\n/**\n* Returns the last element in an array for which a predicate function returns a truthy value.\n*\n* @name findLast\n* @memberof BooleanArray.prototype\n* @type {Function}\n* @param {Function} predicate - predicate function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a boolean array\n* @throws {TypeError} first argument must be a function\n* @returns {(boolean|void)} array element or undefined\n*\n* @example\n* function predicate( v ) {\n*     return v === true;\n* }\n*\n* var arr = new BooleanArray( 3 );\n*\n* arr.set( true, 0 );\n* arr.set( false, 1 );\n* arr.set( true, 2 );\n*\n* var v = arr.findLast( predicate );\n* // returns true\n*/\nsetReadOnly( BooleanArray.prototype, 'findLast', function findLast( predicate, thisArg ) {\n\tvar buf;\n\tvar v;\n\tvar i;\n\n\tif ( !isBooleanArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a boolean array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = this._length-1; i >= 0; i-- ) {\n\t\tv = Boolean( buf[ i ] );\n\t\tif ( predicate.call( thisArg, v, i, this ) ) {\n\t\t\treturn v;\n\t\t}\n\t}\n});\n\n/**\n* Returns an array element.\n*\n* @name get\n* @memberof BooleanArray.prototype\n* @type {Function}\n* @param {NonNegativeInteger} idx - element index\n* @throws {TypeError} `this` must be a boolean array\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {(boolean|void)} array element\n*\n* @example\n* var arr = new BooleanArray( 10 );\n*\n* var v = arr.get( 0 );\n* // returns false\n*\n* arr.set( [ true, false ], 0 );\n*\n* v = arr.get( 0 );\n* // returns true\n*\n* v = arr.get( 100 );\n* // returns undefined\n*/\nsetReadOnly( BooleanArray.prototype, 'get', function get( idx ) {\n\tif ( !isBooleanArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a boolean array.' );\n\t}\n\tif ( !isNonNegativeInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx >= this._length ) {\n\t\treturn;\n\t}\n\treturn Boolean( this._buffer[ idx ] );\n});\n\n/**\n* Number of array elements.\n*\n* @name length\n* @memberof BooleanArray.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new BooleanArray( 10 );\n*\n* var len = arr.length;\n* // returns 10\n*/\nsetReadOnlyAccessor( BooleanArray.prototype, 'length', function get() {\n\treturn this._length;\n});\n\n/**\n* Returns a new array with each element being the result of a provided callback function.\n*\n* @name map\n* @memberof BooleanArray.prototype\n* @type {Function}\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback function execution context\n* @throws {TypeError} `this` must be a boolean array\n* @throws {TypeError} first argument must be a function\n* @returns {BooleanArray} new boolean array\n*\n* @example\n* function invert( v ) {\n*     return !v;\n* }\n*\n* var arr = new BooleanArray( 3 );\n*\n* arr.set( true, 0 );\n* arr.set( false, 1 );\n* arr.set( true, 2 );\n*\n* var out = arr.map( invert );\n* // returns <BooleanArray>\n*\n* var z = out.get( 0 );\n* // returns false\n*\n* z = out.get( 1 );\n* // returns true\n*\n* z = out.get( 2 );\n* // returns false\n*/\nsetReadOnly( BooleanArray.prototype, 'map', function map( fcn, thisArg ) {\n\tvar outbuf;\n\tvar out;\n\tvar buf;\n\tvar i;\n\tif ( !isBooleanArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a boolean array.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a function. Value: `%s`.', fcn );\n\t}\n\tbuf = this._buffer;\n\tout = new this.constructor( this._length );\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\toutbuf[ i ] = Boolean( fcn.call( thisArg, Boolean( buf[ i ] ), i, this ) );\n\t}\n\treturn out;\n});\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   When provided a typed array, we must check whether the source array shares the same buffer as the target array and whether the underlying memory overlaps. In particular, we are concerned with the following scenario:\n*\n*     ```text\n*     buf:                ---------------------\n*     src: ---------------------\n*     ```\n*\n*     In the above, as we copy values from `src`, we will overwrite values in the `src` view, resulting in duplicated values copied into the end of `buf`, which is not intended. Hence, to avoid overwriting source values, we must **copy** source values to a temporary array.\n*\n*     In the other overlapping scenario,\n*\n*     ```text\n*     buf: ---------------------\n*     src:                ---------------------\n*     ```\n*\n*     by the time we begin copying into the overlapping region, we are copying from the end of `src`, a non-overlapping region, which means we don't run the risk of copying copied values, rather than the original `src` values, as intended.\n*\n* @name set\n* @memberof BooleanArray.prototype\n* @type {Function}\n* @param {(Collection|BooleanArray|*)} value - value(s)\n* @param {NonNegativeInteger} [i=0] - element index at which to start writing values\n* @throws {TypeError} `this` must be a boolean array\n* @throws {TypeError} index argument must be a nonnegative integer\n* @throws {RangeError} index argument is out-of-bounds\n* @throws {RangeError} target array lacks sufficient storage to accommodate source values\n* @returns {void}\n*\n* @example\n* var arr = new BooleanArray( 10 );\n*\n* var v = arr.get( 0 );\n* // returns false\n*\n* arr.set( [ true, false ], 0 );\n*\n* v = arr.get( 0 );\n* // returns true\n*/\nsetReadOnly( BooleanArray.prototype, 'set', function set( value ) {\n\tvar sbuf;\n\tvar idx;\n\tvar buf;\n\tvar tmp;\n\tvar N;\n\tvar i;\n\tvar j;\n\tif ( !isBooleanArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a boolean array.' );\n\t}\n\tbuf = this._buffer;\n\tif ( arguments.length > 1 ) {\n\t\tidx = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Index argument must be a nonnegative integer. Value: `%s`.', idx ) );\n\t\t}\n\t} else {\n\t\tidx = 0;\n\t}\n\tif ( isCollection( value ) ) {\n\t\tN = value.length;\n\t\tif ( idx+N > this._length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t}\n\t\tif ( isBooleanArray( value ) ) {\n\t\t\tsbuf = value._buffer; // eslint-disable-line no-underscore-dangle\n\t\t} else {\n\t\t\tsbuf = value;\n\t\t}\n\t\t// Check for overlapping memory...\n\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\tif (\n\t\t\tsbuf.buffer === buf.buffer &&\n\t\t\t(\n\t\t\t\tsbuf.byteOffset < j &&\n\t\t\t\tsbuf.byteOffset+sbuf.byteLength > j\n\t\t\t)\n\t\t) {\n\t\t\t// We need to copy source values...\n\t\t\ttmp = new Uint8Array( sbuf.length );\n\t\t\tfor ( i = 0; i < sbuf.length; i++ ) {\n\t\t\t\ttmp[ i ] = sbuf[ i ]; // TODO: handle accessor arrays\n\t\t\t}\n\t\t\tsbuf = tmp;\n\t\t}\n\t\tfor ( i = 0; i < N; idx++, i++ ) {\n\t\t\tbuf[ idx ] = ( sbuf[ i ] ) ? 1 : 0;\n\t\t}\n\t\treturn;\n\t}\n\tif ( idx >= this._length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%u`.', idx ) );\n\t}\n\tbuf[ idx ] = ( value ) ? 1 : 0;\n});\n\n/**\n* Sorts an array in-place.\n*\n* @name sort\n* @memberof BooleanArray.prototype\n* @type {Function}\n* @param {Function} [compareFcn] - comparison function\n* @throws {TypeError} `this` must be a boolean array\n* @throws {TypeError} first argument must be a function\n* @returns {BooleanArray} sorted array\n*\n* @example\n* function compare( a, b ) {\n*    if ( a === false ) {\n*        if ( b === false ) {\n*            return 0;\n*        }\n*        return 1;\n*    }\n*    if ( b === true ) {\n*        return 0;\n*    }\n*    return -1;\n* }\n*\n* var arr = new BooleanArray( 3 );\n*\n* arr.set( true, 0 );\n* arr.set( false, 1 );\n* arr.set( true, 2 );\n*\n* arr.sort( compare );\n*\n* var v = arr.get( 0 );\n* // returns true\n*\n* v = arr.get( 1 );\n* // returns true\n*\n* v = arr.get( 2 );\n* // returns false\n*\n*/\nsetReadOnly( BooleanArray.prototype, 'sort', function sort( compareFcn ) {\n\tvar buf;\n\n\tif ( !isBooleanArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a boolean array.' );\n\t}\n\tbuf = this._buffer;\n\tif ( arguments.length === 0 ) {\n\t\tbuf.sort();\n\t\treturn this;\n\t}\n\tif ( !isFunction( compareFcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', compareFcn ) );\n\t}\n\tbuf.sort( compare );\n\treturn this;\n\n\t/**\n\t* Comparison function for sorting.\n\t*\n\t* @private\n\t* @param {boolean} a - first boolean value for comparison\n\t* @param {boolean} b - second boolean value for comparison\n\t* @returns {number} comparison result\n\t*/\n\tfunction compare( a, b ) {\n\t\treturn compareFcn( Boolean( a ), Boolean( b ) );\n\t}\n});\n\n\n// EXPORTS //\n\nmodule.exports = BooleanArray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Boolean array.\n*\n* @module @stdlib/array-bool\n*\n* @example\n* var BooleanArray = require( '@stdlib/array-bool' );\n*\n* var arr = new BooleanArray();\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var BooleanArray = require( '@stdlib/array-bool' );\n*\n* var arr = new BooleanArray( 2 );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var BooleanArray = require( '@stdlib/array-bool' );\n*\n* var arr = new BooleanArray( [ true, false ] );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var BooleanArray = require( '@stdlib/array-bool' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new BooleanArray( buf );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 16\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var BooleanArray = require( '@stdlib/array-bool' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new BooleanArray( buf, 8 );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 8\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var BooleanArray = require( '@stdlib/array-bool' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new BooleanArray( buf, 8, 2 );\n* // returns <BooleanArray>\n*\n* var len = arr.length;\n* // returns 2\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_from_iterator", "__commonJSMin", "exports", "module", "Boolean", "fromIterator", "it", "out", "v", "require_from_iterator_map", "__commonJSMin", "exports", "module", "Boolean", "fromIteratorMap", "it", "clbk", "thisArg", "out", "v", "require_from_array", "__commonJSMin", "exports", "module", "Boolean", "fromArray", "buf", "arr", "len", "i", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "isCollection", "isArrayBuffer", "isObject", "isFunction", "hasIteratorSymbolSupport", "ITERATOR_SYMBOL", "setReadOnly", "setReadOnlyAccessor", "Uint8Array", "Boolean", "getter", "accessorGetter", "format", "fromIterator", "fromIteratorMap", "fromArray", "BYTES_PER_ELEMENT", "HAS_ITERATOR_SYMBOL", "isBooleanArray", "value", "isBooleanArrayConstructor", "BooleanArray", "byteOffset", "nargs", "buf", "len", "arg", "src", "thisArg", "clbk", "out", "tmp", "get", "i", "args", "predicate", "v", "idx", "fcn", "outbuf", "sbuf", "N", "j", "compareFcn", "compare", "a", "b", "main"]
}
